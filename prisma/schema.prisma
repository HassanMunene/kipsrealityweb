generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                String             @id @default(uuid())
  email             String             @unique
  passwordHash      String             @map("password_hash")
  emailVerified     Boolean            @default(false) @map("email_verified")
  firstName         String?            @map("first_name")
  lastName          String?            @map("last_name")
  phone             String?
  avatarUrl         String?            @map("avatar_url")
  status            UserStatus         @default(ACTIVE)
  lastLoginAt       DateTime?          @map("last_login_at")
  createdAt         DateTime           @default(now()) @map("created_at")
  updatedAt         DateTime           @updatedAt @map("updated_at")
  organizationUsers OrganizationUser[]
  vendors           Vendor[]

  @@map("users")
}

model Organization {
  id        String             @id @default(uuid())
  name      String
  slug      String             @unique
  logoUrl   String?            @map("logo_url")
  website   String?
  phone     String?
  address   String?
  isActive  Boolean            @default(true) @map("is_active")
  createdAt DateTime           @default(now()) @map("created_at")
  updatedAt DateTime           @updatedAt @map("updated_at")
  users     OrganizationUser[]
  vendors   Vendor[]

  @@map("organizations")
}

model OrganizationUser {
  id             String       @id @default(uuid())
  userId         String       @map("user_id")
  organizationId String       @map("organization_id")
  role           UserRole
  createdAt      DateTime     @default(now()) @map("created_at")
  organization   Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)
  user           User         @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@index([organizationId], map: "organization_users_organization_id_fkey")
  @@map("organization_users")
}

model Vendor {
  id             String       @id @default(uuid())
  organizationId String       @map("organization_id")
  userId         String       @map("user_id")
  companyName    String       @map("company_name")
  serviceType    String       @map("service_type")
  phone          String?
  email          String?
  isActive       Boolean      @default(true) @map("is_active")
  createdAt      DateTime     @default(now()) @map("created_at")
  updatedAt      DateTime     @updatedAt @map("updated_at")
  organization   Organization @relation(fields: [organizationId], references: [id])
  user           User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@index([userId], map: "vendors_user_id_fkey")
  @@map("vendors")
}

model Category {
  id       Int       @id @default(autoincrement())
  name     String
  tagline  String
  color    String
  services Service[]

  @@map("categories")
}

model Service {
  id          Int      @id @default(autoincrement())
  category_id Int
  name        String
  description String
  features    Json
  impact      String
  icon        String
  category    Category @relation(fields: [category_id], references: [id])

  @@index([category_id], map: "services_category_id_fkey")
  @@map("services")
}

enum UserRole {
  SYSTEM_ADMIN
  PROPERTY_MANAGER
  TENANT
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

model AboutUs {
  id          Int      @id @default(autoincrement())
  section     String   // e.g. "About Us", "Our Story", "Our Vision"
  description String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}


model Testimonial {
  id        Int      @id @default(autoincrement())
  name      String
  role      String
  image     String
  text      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}


model Job {
  id          Int        @id @default(autoincrement())
  title       String
  description String
  image       String
  createdAt   DateTime   @default(now())
  updatedAt   DateTime   @updatedAt
  applications Application[] // Relation to Applications
}


model Applicant {
  id        Int         @id @default(autoincrement())
  firstName String
  lastName  String
  email     String      @unique
  resume    String?     // URL or path to uploaded resume
  createdAt DateTime    @default(now())
  applications Application[] // Relation to Applications
}

model Application {
  id          Int      @id @default(autoincrement())
  job         Job      @relation(fields: [jobId], references: [id])
  jobId       Int
  applicant   Applicant @relation(fields: [applicantId], references: [id])
  applicantId Int
  status      String   @default("Pending") // e.g., Pending, Reviewed, Accepted, Rejected
  appliedAt   DateTime @default(now())
}



model ContactMessage {
  id        Int      @id @default(autoincrement())
  name      String
  email     String
  message   String
  createdAt DateTime @default(now())
}


// LANDING PAGE HERO SECTION SCHEMAS MATE
model HeroSectionContent {
  id          String   @id @default(cuid())
  key         String   @unique
  value       String
  dataType    String   // 'text', 'image', 'array'
  order       Int?
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HeroSectionFeature {
  id          String   @id @default(cuid())
  icon        String   // Icon name from lucide-react
  text        String
  subtext     String
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}

model HeroSectionStat {
  id          String   @id @default(cuid())
  label       String
  value       String
  trend       String
  color       String
  order       Int
  isActive    Boolean  @default(true)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
}