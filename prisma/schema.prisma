// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

// ========================
// ENUMS
// ========================

enum UserRole {
  SYSTEM_ADMIN
  PROPERTY_MANAGER 
  TENANT
  VENDOR
}

enum UserStatus {
  ACTIVE
  INACTIVE
  SUSPENDED
}

// ========================
// AUTHORIZATION MODELS
// ========================

model User {
  id              String     @id @default(uuid())
  email           String     @unique
  passwordHash    String     @map("password_hash")
  emailVerified   Boolean    @default(false) @map("email_verified")
  firstName       String?    @map("first_name")
  lastName        String?    @map("last_name")
  phone           String?
  avatarUrl       String?    @map("avatar_url")
  status          UserStatus @default(ACTIVE)
  lastLoginAt     DateTime?  @map("last_login_at")
  createdAt       DateTime   @default(now()) @map("created_at")
  updatedAt       DateTime   @updatedAt @map("updated_at")

  // Relations
  organizationUsers OrganizationUser[]
  vendors           Vendor[]

  @@map("users")
}

model Organization {
  id          String   @id @default(uuid())
  name        String
  slug        String   @unique // For URLs: "kipsreality", "sunset-properties"
  logoUrl     String?  @map("logo_url")
  website     String?
  phone       String?
  address     String?
  isActive    Boolean  @default(true) @map("is_active")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @updatedAt @map("updated_at")

  // Relations
  users       OrganizationUser[]
  vendors     Vendor[]

  @@map("organizations")
}

model OrganizationUser {
  id             String   @id @default(uuid())
  userId         String   @map("user_id")
  organizationId String   @map("organization_id")
  role           UserRole
  createdAt      DateTime @default(now()) @map("created_at")

  // Relations
  user         User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  organization Organization @relation(fields: [organizationId], references: [id], onDelete: Cascade)

  @@unique([userId, organizationId])
  @@map("organization_users")
}

model Vendor {
  id              String   @id @default(uuid())
  organizationId  String   @map("organization_id")
  userId          String   @map("user_id") // Link to User table for login
  companyName     String   @map("company_name")
  serviceType     String   @map("service_type") // "Plumbing", "Electrical", etc.
  phone           String?
  email           String?
  isActive        Boolean  @default(true) @map("is_active")
  createdAt       DateTime @default(now()) @map("created_at")
  updatedAt       DateTime @updatedAt @map("updated_at")

  // Relations
  organization Organization @relation(fields: [organizationId], references: [id])
  user         User         @relation(fields: [userId], references: [id])

  @@unique([organizationId, userId])
  @@map("vendors")
}